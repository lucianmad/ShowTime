@page "/festivals"
@using ShowTime.BusinessLogic.Abstractions
@using ShowTime.BusinessLogic.Dtos
@using ShowTime.DataAccess.Models
@inject IFestivalService FestivalService
@inject ICityService CityService
@inject ICountryService CountryService
@inject ILineupService LineupService
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@rendermode InteractiveServer

<PageTitle>Festivals</PageTitle>

<MudContainer MaxWidth="MaxWidth.Large" Style="padding-bottom: 140px">
    <MudGrid Justify="Justify.SpaceBetween">
        <MudText Typo="Typo.h4" Class="mb-4 neon-title">FESTIVALS</MudText>
        <AuthorizeView Roles="Admin">
            <MudButton Class="neon-button"
                       Variant="Variant.Text"
                       @onclick="@(AddFestivalAsync)">
                <span class="button-text">ADD FESTIVAL</span>
            </MudButton>
        </AuthorizeView>
    </MudGrid>
    
    <div class="search-filters">
        <div class="input-wrapper">
            <span class="search-icon">
                <svg width="20" height="20" viewBox="0 0 24 24" fill="#00ffff">
                    <path d="M15.5 14h-.79l-.28-.27a6.5 6.5 0 0 0 1.48-5.34c-.47-2.78-2.79-5-5.59-5.34a6.505 6.505 0 0 0-7.27 7.27c.34 2.8 2.56 5.12 5.34 5.59a6.5 6.5 0 0 0 5.34-1.48l.27.28v.79l4.25 4.25c.41.41 1.08.41 1.49 0 .41-.41.41-1.08 0-1.49L15.5 14zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/>
                </svg>
            </span>
            <InputText @bind-Value="_searchTerm" 
                       @bind-Value:after="ApplyFiltersAsync"
                       class="custom-search"
                       placeholder="Search by name" />
        </div>

        <div class="select-wrapper">
            <InputSelect @bind-Value="_selectedCountryId" 
                         @bind-Value:after="ApplyFiltersAsync"
                         class="custom-select">
                <option value="">All Countries</option>
                @if (_countries != null)
                {
                    @foreach (var country in _countries)
                    {
                        <option value="@country.Id">@country.Name</option>
                    }
                }
            </InputSelect>
            <span class="select-arrow">â–¼</span>
        </div>
    </div>
    
    <div class="date-filter-section">
        <div class="custom-date-picker">
            <div class="date-input-wrapper">
                <span class="date-input-label">From Date</span>
                <MudDatePicker Date="_customStartDate"
                               DateChanged="OnStartDateChanged"
                               Variant="Variant.Outlined"
                               PickerVariant="PickerVariant.Inline"
                               Label=""
                               Class="custom-mud-datepicker"/>
            </div>
        
            <div class="date-input-wrapper">
                <span class="date-input-label">To Date</span>
                <MudDatePicker Date="_customEndDate"
                               DateChanged="OnEndDateChanged"
                               Variant="Variant.Outlined"
                               PickerVariant="PickerVariant.Inline"
                               Label=""
                               Class="custom-mud-datepicker"/>
            </div>
        
            <MudButton Class="neon-button clear-dates-btn"
                       Variant="Variant.Text"
                       OnClick="ClearCustomDates"
                       EndIcon="@Icons.Material.Filled.Clear">
                Clear
            </MudButton>
        </div>
    </div>

    @if (HasActiveFilters())
    {
        <div class="filter-summary">
            <div class="filter-summary-text">
                @GetFilterSummaryText()
            </div>
            <div class="filter-summary-count">
                @_festivals.Count festival@(_festivals.Count == 1 ? "" : "s") found
            </div>
        </div>
    }

    @if (_festivals.Count == 0)
    {
        <MudPaper Class="empty-state">
            <MudIcon Icon="@Icons.Material.Filled.Event" Size="Size.Large" Style="color: rgba(0, 255, 255, 0.5);" />
            <MudText Class="neon-text">No festivals found matching your criteria</MudText>
        </MudPaper>
    }
    else
    {
        <div class="festivals-list">
            @foreach (var festival in _festivals)
            {
                <MudCard Class="festival-card-full">
                    <div class="festival-content-wrapper">
                        <div class="festival-image-container">
                            <MudCardMedia Image="@festival.SplashArt" Height="250" Style="object-fit: cover;" />
                            <div class="festival-date-badge">
                                <MudText Typo="Typo.caption" Class="date-text">@FormatDateRange(festival.StartDate, festival.EndDate)</MudText>
                            </div>
                            <AuthorizeView Roles="Admin">
                                <div class="admin-actions">
                                    <MudIconButton Icon="@Icons.Material.Filled.Edit"
                                                   Color="Color.Primary"
                                                   Variant="Variant.Filled"
                                                   Size="Size.Small"
                                                   Style="background-color: rgba(234,146,12,0.8);"
                                                   @onclick="@(() => EditFestivalAsync(festival.Id))"/>
                                    <MudIconButton Icon="@Icons.Material.Filled.Delete"
                                                   Color="Color.Primary"
                                                   Variant="Variant.Filled"
                                                   Size="Size.Small"
                                                   Style="background-color: rgba(253,2,2,0.8);"
                                                   @onclick="@(() => DeleteFestivalAsync(festival.Id))"/>
                                </div>
                            </AuthorizeView>
                        </div>
                        
                        <MudCardContent Class="festival-content-full">
                            <div class="festival-header">
                                <MudText Typo="Typo.h5" Class="neon-card-title">@festival.Name</MudText>
                                <MudText Typo="Typo.body2" Class="neon-card-text festival-location">
                                    <MudIcon Icon="@Icons.Material.Filled.LocationOn" Size="Size.Small" />
                                    @festival.City?.Name, @festival.City?.Country?.Name
                                </MudText>
                            </div>

                            @if (_festivalLineups.ContainsKey(festival.Id) && _festivalLineups[festival.Id].Any())
                            {
                                <div class="lineup-section-full">
                                    <div class="lineup-header">
                                        <MudText Typo="Typo.h6" Class="lineup-title">LINEUP</MudText>
                                        <MudText Typo="Typo.caption" Class="lineup-count">@_festivalLineups[festival.Id].Count() artists</MudText>
                                    </div>
                                    
                                    <div class="lineup-grid-full">
                                        @foreach (var lineup in _festivalLineups[festival.Id].OrderBy(l => l.StartTime))
                                        {
                                            <div class="lineup-item-full">
                                                <div class="lineup-artist-name">@lineup.ArtistName</div>
                                                <div class="lineup-details-full">
                                                    <span class="lineup-time">@lineup.StartTime.ToString("HH:mm")</span>
                                                    <span class="lineup-stage">@lineup.Stage</span>
                                                </div>
                                            </div>
                                        }
                                    </div>
                                </div>
                            }
                            else
                            {
                                <div class="lineup-section-full">
                                    <MudText Typo="Typo.body2" Class="no-lineup-text">Lineup to be announced</MudText>
                                </div>
                            }

                            <div class="festival-actions">
                                <AuthorizeView Roles="User">
                                    <MudButton Variant="Variant.Filled" 
                                               Class="neon-button book-button"
                                               OnClick="() => OpenBookingDialog(festival.Id)">
                                        <MudIcon Icon="@Icons.Material.Filled.BookOnline" Size="Size.Small" />
                                        Book Ticket
                                    </MudButton>
                                </AuthorizeView>
                            </div>
                        </MudCardContent>
                    </div>
                </MudCard>
            }
        </div>
    }
    
    <MudSpacer></MudSpacer>
</MudContainer>

@code {
    private IList<FestivalGetDto> _festivals = new List<FestivalGetDto>();
    private IList<FestivalGetDto> _allFestivals = new List<FestivalGetDto>();
    private IList<CountryGetDto> _countries = new List<CountryGetDto>();
    private IList<CityGetDto> _cities = new List<CityGetDto>();
    private Dictionary<int, IEnumerable<LineupGetDto>> _festivalLineups = new();
    private string _searchTerm = string.Empty;
    private int? _selectedCountryId = null;
    
    private DateTime? _customStartDate = null;
    private DateTime? _customEndDate = null;

    protected override async Task OnInitializedAsync()
    {
        _cities = await CityService.GetAllEntitiesAsync();
        _countries = await CountryService.GetAllEntitiesAsync();
        _allFestivals = await FestivalService.GetAllEntitiesAsync();
        _festivals = _allFestivals;
        
        await LoadLineupsAsync();
    }

    private async Task LoadLineupsAsync()
    {
        _festivalLineups.Clear();
        foreach (var festival in _allFestivals)
        {
            try
            {
                var lineup = await LineupService.GetLineupAsync(festival.Id);
                _festivalLineups[festival.Id] = lineup;
            }
            catch
            {
                _festivalLineups[festival.Id] = new List<LineupGetDto>();
            }
        }
    }

    private async Task ClearCustomDates()
    {
        _customStartDate = null;
        _customEndDate = null;
        await ApplyFiltersAsync();
    }

    private string FormatDateRange(DateTime? startDate, DateTime? endDate)
    {
        if (!startDate.HasValue || !endDate.HasValue)
            return "TBD";

        var start = startDate.Value;
        var end = endDate.Value;

        if (start.Date == end.Date)
        {
            return start.ToString("d MMMM yyyy");
        }

        if (start.Month == end.Month && start.Year == end.Year)
        {
            return $"{start.Day}-{end.Day} {start:MMMM yyyy}";
        }

        if (start.Year == end.Year)
        {
            return $"{start:d MMMM} - {end:d MMMM yyyy}";
        }

        return $"{start:d MMMM yyyy} - {end:d MMMM yyyy}";
    }

    private async Task AddFestivalAsync()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true, MaxWidth = MaxWidth.Medium, FullWidth = true };
        var dialogReference = await DialogService.ShowAsync<AddFestivalDialog>("Add festival", options);
        var result = await dialogReference.Result;

        if (result != null && !result.Canceled)
        {
            _allFestivals = await FestivalService.GetAllEntitiesAsync();
            await LoadLineupsAsync();
            await ApplyFiltersAsync();
        }
    }
    
    private async Task EditFestivalAsync(int id)
    {
        var parameters = new DialogParameters { { "FestivalId", id } };
        var options = new DialogOptions { CloseOnEscapeKey = true, MaxWidth = MaxWidth.Large, FullWidth = true };
        var dialogReference = await DialogService.ShowAsync<EditFestivalDialog>("Edit Festival", parameters, options);
        var result = await dialogReference.Result;

        if (result != null && !result.Canceled)
        {
            _allFestivals = await FestivalService.GetAllEntitiesAsync();
            await LoadLineupsAsync();
            await ApplyFiltersAsync();
        }
    }
    
    private async Task DeleteFestivalAsync(int id)
    {
        var parameters = new DialogParameters<DeleteFestivalDialog>
        {
            { "FestivalId", id},
            { x => x.ContentText, "Are you sure you want to delete this festival? This process cannot be undone." },
            { x => x.ButtonText, "Delete" },
            { x => x.Color, Color.Error }
        };

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };
        var dialogReference = await DialogService.ShowAsync<DeleteFestivalDialog>("Delete", parameters, options);
        var result = await dialogReference.Result;

        if (result != null && !result.Canceled)
        {
            _allFestivals = await FestivalService.GetAllEntitiesAsync();
            await LoadLineupsAsync();
            await ApplyFiltersAsync();
        }
    }

    private async Task ApplyFiltersAsync()
    {
        IEnumerable<FestivalGetDto> filtered = _allFestivals;

        if (_selectedCountryId.HasValue)
        {
            filtered = filtered.Where(f => f.City?.CountryId == _selectedCountryId.Value);
        }

        if (!string.IsNullOrWhiteSpace(_searchTerm))
        {
            filtered = filtered.Where(f => f.Name.Contains(_searchTerm, StringComparison.OrdinalIgnoreCase));
        }

        filtered = ApplyDateFilter(filtered);

        _festivals = filtered.ToList();
        StateHasChanged();
    }

    private IEnumerable<FestivalGetDto> ApplyDateFilter(IEnumerable<FestivalGetDto> festivals)
    {
        if (_customStartDate.HasValue && _customEndDate.HasValue)
        {
            return festivals.Where(f => 
                f.StartDate.HasValue && f.EndDate.HasValue &&
                f.StartDate.Value.Date <= _customEndDate.Value.Date && 
                f.EndDate.Value.Date >= _customStartDate.Value.Date);
        }
        else if (_customStartDate.HasValue)
        {
            return festivals.Where(f => 
                f.StartDate.HasValue && f.EndDate.Value.Date >= _customStartDate.Value.Date);
        }
        else if (_customEndDate.HasValue)
        {
            return festivals.Where(f => 
                f.EndDate.HasValue && f.EndDate.Value.Date <= _customEndDate.Value.Date);
        }

        return festivals;
    }
    
    private async Task OnStartDateChanged(DateTime? date)
    {
        _customStartDate = date;
        await ApplyFiltersAsync();
    }

    private async Task OnEndDateChanged(DateTime? date)
    {
        _customEndDate = date;
        await ApplyFiltersAsync();
    }

    private bool HasActiveFilters()
    {
        return !string.IsNullOrWhiteSpace(_searchTerm) || 
               _selectedCountryId.HasValue || 
               _customStartDate.HasValue ||
               _customEndDate.HasValue;
    }

    private string GetFilterSummaryText()
    {
        var filters = new List<string>();
        
        if (!string.IsNullOrWhiteSpace(_searchTerm))
            filters.Add($"Name: \"{_searchTerm}\"");
            
        if (_selectedCountryId.HasValue)
        {
            var country = _countries.FirstOrDefault(c => c.Id == _selectedCountryId.Value);
            if (country != null)
                filters.Add($"Country: {country.Name}");
        }
        
        if (_customStartDate.HasValue || _customEndDate.HasValue)
        {
            var dateFilterText = GetCustomDateFilterText();
            if (!string.IsNullOrWhiteSpace(dateFilterText))
                filters.Add($"Date: {dateFilterText}");
        }
        
        return string.Join(" â€¢ ", filters);
    }

    private string GetCustomDateFilterText()
    {
        if (_customStartDate.HasValue && _customEndDate.HasValue)
            return $"{_customStartDate.Value:MMM dd} - {_customEndDate.Value:MMM dd, yyyy}";
        else if (_customStartDate.HasValue)
            return $"From {_customStartDate.Value:MMM dd, yyyy}";
        else if (_customEndDate.HasValue)
            return $"Until {_customEndDate.Value:MMM dd, yyyy}";
        return "";
    }
    
    private async Task OpenBookingDialog(int festivalId)
    {
        var parameters = new DialogParameters { { "FestivalId", festivalId } };
        var options = new DialogOptions { CloseOnEscapeKey = true, MaxWidth = MaxWidth.Small, FullWidth = true };
        var dialogReference = await DialogService.ShowAsync<BookingDialog>("Book Ticket", parameters, options);

        var result = await dialogReference.Result;
        if (result != null && !result.Canceled)
        {
            Snackbar.Add("Booking complete!", Severity.Success);
        }
    }
}