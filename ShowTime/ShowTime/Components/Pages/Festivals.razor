@page "/festivals"
@using ShowTime.BusinessLogic.Abstractions
@using ShowTime.BusinessLogic.Dtos
@using ShowTime.DataAccess.Models
@inject IFestivalService FestivalService
@inject ICityService CityService
@inject ICountryService CountryService
@inject ILineupService LineupService
@inject IDialogService DialogService
@rendermode InteractiveServer


<MudContainer>
    <MudGrid Justify="Justify.SpaceBetween">
        <MudText Typo="Typo.h4" Class="mb-4 neon-title">FESTIVALS</MudText>

        <MudButton Class="neon-button"
                   Variant="Variant.Text"
                   @onclick="@(AddFestivalAsync)">
            <span class="button-text">ADD FESTIVAL</span>
        </MudButton>
    </MudGrid>

   
    <div class="search-filters">
        <div class="input-wrapper">
            <span class="search-icon">
                <svg width="20" height="20" viewBox="0 0 24 24" fill="#00ffff">
                    <path d="M15.5 14h-.79l-.28-.27a6.5 6.5 0 0 0 1.48-5.34c-.47-2.78-2.79-5-5.59-5.34a6.505 6.505 0 0 0-7.27 7.27c.34 2.8 2.56 5.12 5.34 5.59a6.5 6.5 0 0 0 5.34-1.48l.27.28v.79l4.25 4.25c.41.41 1.08.41 1.49 0 .41-.41.41-1.08 0-1.49L15.5 14zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/>
                </svg>
            </span>
            <InputText @bind-Value="_searchTerm" 
                       @bind-Value:after="ApplyFiltersAsync"
                       class="custom-search"
                       placeholder="Search by name" />
        </div>

        <div class="select-wrapper">
            <InputSelect @bind-Value="_selectedCountryId" 
                         @bind-Value:after="ApplyFiltersAsync"
                         class="custom-select">
                <option value="">All Countries</option>
                @if (_countries != null)
                {
                    @foreach (var country in _countries)
                    {
                        <option value="@country.Id">@country.Name</option>
                    }
                }
            </InputSelect>
            <span class="select-arrow">â–¼</span>
        </div>
    </div>

    
    
    @if (_festivals.Count == 0)
    {
        <MudPaper Class="pa-4 text-center" Style="background-color: #f5f5f5;">
            <MudText>No festivals found</MudText>
        </MudPaper>
    }
    else
    {
        <MudGrid Spacing="4" Justify="Justify.FlexStart">
            @foreach (var festival in _festivals)
            {
                <MudItem xs="12" sm="6" md="4" lg="3" xl="2">
                    <MudCard Style="height: 100%; border-radius: 18px; overflow: hidden; position: relative;">
                        <div style="position: relative;">
                            <MudCardMedia Image="@festival.SplashArt" Height="250" Style="object-fit: cover;"/>
                            <div style="position: absolute; top: 8px; right: 8px; display: flex; gap: 4px;">
                                <MudIconButton Icon="@Icons.Material.Filled.Edit"
                                               Color="Color.Primary"
                                               Variant="Variant.Filled"
                                               Size="Size.Small"
                                               Style="background-color: rgba(234,146,12,0.8);"
                                               @onclick="@(() => EditFestivalAsync(festival.Id))"/>
                                <MudIconButton Icon="@Icons.Material.Filled.Delete"
                                               Color="Color.Primary"
                                               Variant="Variant.Filled"
                                               Size="Size.Small"
                                               Style="background-color: rgba(253,2,2,0.8);"
                                               @onclick="@(() => DeleteFestivalAsync(festival.Id))"/>
                            </div>
                        </div>
                        <MudCardContent Style="background: linear-gradient(135deg, #41267a 0%, #1a1a2e 100%); min-height: 160px;">
                            <MudText Typo="Typo.h6" Class="neon-card-title" Style="margin-bottom: 8px;">@festival.Name</MudText>
                            <MudText Typo="Typo.body2" Class="neon-card-text">@festival.City?.Name, @festival.City?.Country?.Name</MudText>
                            <MudText Typo="Typo.body2" Class="neon-card-text">@festival.StartDate?.ToShortDateString() - @festival.EndDate?.ToShortDateString()</MudText>
                            <MudText Typo="Typo.body2" Class="neon-card-text">Capacity: @festival.Capacity</MudText>
                            
                            @if (_festivalLineups.ContainsKey(festival.Id) && _festivalLineups[festival.Id].Any())
                            {
                                <div class="lineup-section">
                                    <div class="lineup-toggle" @onclick="@(() => ToggleLineupVisibility(festival.Id))">
                                        <MudIcon Icon="@(_lineupVisibility.GetValueOrDefault(festival.Id) ? Icons.Material.Filled.ExpandLess : Icons.Material.Filled.ExpandMore)" 
                                                 Size="Size.Small" />
                                        <span>Lineup (@_festivalLineups[festival.Id].Count())</span>
                                    </div>
                                    
                                    @if (_lineupVisibility.GetValueOrDefault(festival.Id))
                                    {
                                        <div style="max-height: 120px; overflow-y: auto;">
                                            @foreach (var lineup in _festivalLineups[festival.Id].OrderBy(l => l.StartTime))
                                            {
                                                <div class="lineup-item">
                                                    <span class="lineup-artist">@lineup.ArtistName</span>
                                                    <div class="lineup-details">
                                                        <div>@lineup.Stage</div>
                                                        <div>@lineup.StartTime.ToString("HH:mm")</div>
                                                    </div>
                                                </div>
                                            }
                                        </div>
                                    }
                                </div>
                            }
                            else
                            {
                                <div class="lineup-section">
                                    <MudText Typo="Typo.body2" Class="no-lineup-text">No lineup available</MudText>
                                </div>
                            }
                        </MudCardContent>
                    </MudCard>
                </MudItem>
            }
        </MudGrid>
    }
</MudContainer>

@code {
    private IList<FestivalGetDto> _festivals = new List<FestivalGetDto>();
    private IList<FestivalGetDto> _allFestivals = new List<FestivalGetDto>();
    private IList<CountryGetDto> _countries = new List<CountryGetDto>();
    private IList<CityGetDto> _cities = new List<CityGetDto>();
    private Dictionary<int, IEnumerable<LineupGetDto>> _festivalLineups = new();
    private Dictionary<int, bool> _lineupVisibility = new();
    private string _searchTerm = string.Empty;
    private int? _selectedCountryId = null;

    protected override async Task OnInitializedAsync()
    {
        _cities = await CityService.GetAllEntitiesAsync();
        _countries = await CountryService.GetAllEntitiesAsync();
        _allFestivals = await FestivalService.GetAllEntitiesAsync();
        _festivals = _allFestivals;
        
        await LoadLineupsAsync();
    }

    private async Task LoadLineupsAsync()
    {
        _festivalLineups.Clear();
        foreach (var festival in _allFestivals)
        {
            try
            {
                var lineup = await LineupService.GetLineupAsync(festival.Id);
                _festivalLineups[festival.Id] = lineup;
            }
            catch
            {
                _festivalLineups[festival.Id] = new List<LineupGetDto>();
            }
        }
    }

    private void ToggleLineupVisibility(int festivalId)
    {
        _lineupVisibility[festivalId] = !_lineupVisibility.GetValueOrDefault(festivalId);
    }

    private async Task AddFestivalAsync()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true, MaxWidth = MaxWidth.Medium, FullWidth = true };

        var dialogReference = await DialogService.ShowAsync<AddFestivalDialog>("Add festival", options);
        var result = await dialogReference.Result;

        if (result != null && !result.Canceled)
        {
            _allFestivals = await FestivalService.GetAllEntitiesAsync();
            await LoadLineupsAsync();
            await ApplyFiltersAsync();
        }
    }
    
    private async Task EditFestivalAsync(int id)
    {
        var parameters = new DialogParameters
        {
            { "FestivalId", id }
        };

        var options = new DialogOptions { CloseOnEscapeKey = true, MaxWidth = MaxWidth.Large, FullWidth = true };

        var dialogReference = await DialogService.ShowAsync<EditFestivalDialog>("Edit Festival", parameters, options);
        var result = await dialogReference.Result;

        if (result != null && !result.Canceled)
        {
            _allFestivals = await FestivalService.GetAllEntitiesAsync();
            await LoadLineupsAsync();
            await ApplyFiltersAsync();
        }
    }
    
    private async Task DeleteFestivalAsync(int id)
    {
        var parameters = new DialogParameters<DeleteFestivalDialog>
        {
            { "FestivalId", id},
            { x => x.ContentText, "Are you sure you want to delete this festival? This process cannot be undone." },
            { x => x.ButtonText, "Delete" },
            { x => x.Color, Color.Error }
        };

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

        var dialogReference = await DialogService.ShowAsync<DeleteFestivalDialog>("Delete", parameters, options);
        var result = await dialogReference.Result;

        if (result != null && !result.Canceled)
        {
            _allFestivals = await FestivalService.GetAllEntitiesAsync();
            await LoadLineupsAsync();
            await ApplyFiltersAsync();
        }
    }

    private Task ApplyFiltersAsync()
    {
        IEnumerable<FestivalGetDto> filtered = _allFestivals;

        if (_selectedCountryId.HasValue)
        {
            filtered = filtered.Where(f => f.City?.CountryId == _selectedCountryId.Value);
        }

        if (!string.IsNullOrWhiteSpace(_searchTerm))
        {
            filtered = filtered.Where(f => f.Name.Contains(_searchTerm, StringComparison.OrdinalIgnoreCase));
        }

        _festivals = filtered.ToList();
        return Task.CompletedTask;
    }
}