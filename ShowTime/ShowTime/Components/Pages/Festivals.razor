@page "/festivals"
@using ShowTime.BusinessLogic.Abstractions
@using ShowTime.BusinessLogic.Dtos
@inject IFestivalService FestivalService
@inject IDialogService DialogService
@rendermode InteractiveServer

<MudContainer>
    <MudGrid Justify="Justify.SpaceBetween">
        <MudItem>
            <MudText Typo="Typo.h4" Class="mb-4" Style="color: #6a1b9a; font-weight: 600;">Festivals Page</MudText>
        </MudItem>
        <MudItem>
            <MudButton Color="Color.Primary"
                       Variant="Variant.Filled"
                       @onclick="@(AddFestivalAsync)">Add festival</MudButton>
        </MudItem>
    </MudGrid>

    @if (_festivals.Count == 0)
    {
        <MudPaper Class="pa-4 text-center" Style="background-color: #f5f5f5;">
            <MudText>No festivals found</MudText>
        </MudPaper>
    }
    else
    {
        <MudGrid Spacing="4" Justify="Justify.FlexStart">
            @foreach (var festival in _festivals)
            {
                <MudItem xs="12" sm="6" md="4" lg="3" xl="2">
                    <MudCard Style="height: 100%; border-radius: 18px; overflow: hidden; position: relative;">
                        <div style="position: relative;">
                            <MudCardMedia Image="@festival.SplashArt" Height="250" Style="object-fit: cover;"/>
                            <div style="position: absolute; top: 8px; right: 8px; display: flex; gap: 4px;">
                                <MudIconButton Icon="@Icons.Material.Filled.Edit"
                                               Color="Color.Primary"
                                               Variant="Variant.Filled"
                                               Size="Size.Small"
                                               Style="background-color: rgba(234,146,12,0.8);"
                                               @onclick="@(() => EditFestivalAsync(festival.Id))"/>
                                <MudIconButton Icon="@Icons.Material.Filled.Delete"
                                               Color="Color.Primary"
                                               Variant="Variant.Filled"
                                               Size="Size.Small"
                                               Style="background-color: rgba(253,2,2,0.8);"
                                               @onclick="@(() => DeleteFestivalAsync(festival.Id))"/>
                            </div>
                        </div>
                        <MudCardContent Style="background: linear-gradient(135deg, #41267a 0%, #1a1a2e 100%);">
                            <MudText Typo="Typo.h6" Style="color: white; margin-bottom: 8px;">@festival.Name</MudText>
                            <MudText Typo="Typo.body2" Style="color: #bdc3c7;">@festival.Location</MudText>
                            <MudText Typo="Typo.body2" Style="color: #bdc3c7;">@festival.StartDate?.ToShortDateString() - @festival.EndDate?.ToShortDateString()</MudText>
                            <MudText Typo="Typo.body2" Style="color: #bdc3c7;">Capacity: @festival.Capacity</MudText>
                        </MudCardContent>
                    </MudCard>
                </MudItem>
            }
        </MudGrid>
    }
</MudContainer>

@code {
    private IList<FestivalGetDto> _festivals = new List<FestivalGetDto>();

    protected override async Task OnInitializedAsync()
    {
        _festivals = await FestivalService.GetAllEntitiesAsync();
    }

    private async Task AddFestivalAsync()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true, MaxWidth = MaxWidth.Medium, FullWidth = true };

        var dialogReference = await DialogService.ShowAsync<AddFestivalDialog>("Add festival", options);
        var result = await dialogReference.Result;

        if (result != null && !result.Canceled)
        {
            _festivals = await FestivalService.GetAllEntitiesAsync();
        }
    }
    
    private async Task EditFestivalAsync(int id)
    {
        var parameters = new DialogParameters
        {
            { "FestivalId", id }
        };

        var options = new DialogOptions { CloseOnEscapeKey = true, MaxWidth = MaxWidth.Medium, FullWidth = true };

        var dialogReference = await DialogService.ShowAsync<EditFestivalDialog>("Edit Festival", parameters, options);
        var result = await dialogReference.Result;


        if (result != null && !result.Canceled)
        {
            _festivals = await FestivalService.GetAllEntitiesAsync();
        }
    }
    
    private async Task DeleteFestivalAsync(int id)
    {
        var parameters = new DialogParameters<DeleteFestivalDialog>
        {
            { "FestivalId", id},
            { x => x.ContentText, "Are you sure you want to delete this festival? This process cannot be undone." },
            { x => x.ButtonText, "Delete" },
            { x => x.Color, Color.Error }
        };

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

        var dialogReference = await DialogService.ShowAsync<DeleteFestivalDialog>("Delete", parameters, options);
        var result = await dialogReference.Result;

        if (result != null && !result.Canceled)
        {
            _festivals = await FestivalService.GetAllEntitiesAsync();
        }
    }

    
}