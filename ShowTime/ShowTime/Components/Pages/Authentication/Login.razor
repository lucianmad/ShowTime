@page "/login"
@using System.Security.Claims
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authentication.Cookies
@using ShowTime.BusinessLogic.Abstractions
@using ShowTime.BusinessLogic.Dtos
@inject IUserService UserService

<PageTitle>Login</PageTitle>

<div class="login-container">
    <div class="login-card">
        <h1 class="login-title">Login</h1>

        @if (!string.IsNullOrEmpty(ErrorMessage))
        {
            <div class="error-message">@ErrorMessage</div>
        }

        <EditForm Model="loginInfo" OnValidSubmit="Authenticate" FormName="LoginForm">
            <DataAnnotationsValidator />

            <div class="form-group">
                <label for="email">Email Address</label>
                <InputText @bind-Value="loginInfo.Email" class="form-control" id="email" placeholder="Enter your email" />
                <div class="form-helper">Type the email for your account</div>
                <ValidationMessage For="() => loginInfo.Email" class="validation-message" />
            </div>

            <div class="form-group">
                <label for="password">Password</label>
                <InputText @bind-Value="loginInfo.Password" class="form-control" id="password" type="password" placeholder="Enter your password" />
                <div class="form-helper">Minimum 8 characters</div>
                <ValidationMessage For="() => loginInfo.Password" class="validation-message" />
            </div>

            <button type="submit" class="login-button" disabled="@IsLoading">
                @if (IsLoading)
                {
                    <span>Logging in...</span>
                }
                else
                {
                    <svg class="icon" viewBox="0 0 24 24">
                        <path d="M12 12c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm0 2c-2.67 0-8 1.34-8 4v2h16v-2c0-2.66-5.33-4-8-4z"/>
                    </svg>
                    <span>Login</span>
                }
            </button>
            
            <div class="divider"></div>

            <div class="register-link">
                Don't have an account?
                <a href="/register">Register here</a>
            </div>
        </EditForm>
    </div>
</div>

@code {
    [SupplyParameterFromForm]
    private LoginDto loginInfo { get; set; } = new();

    [CascadingParameter] private HttpContext HttpContext { get; set; } = null!;

    private bool IsLoading { get; set; } = false;
    private string ErrorMessage { get; set; } = string.Empty;

    private async Task Authenticate()
    {
        try
        {
            IsLoading = true;
            ErrorMessage = string.Empty;
            StateHasChanged();

            var response = await UserService.LoginAsync(loginInfo);

            if (response == null)
            {
                ErrorMessage = "Invalid email or password. Please try again.";
                IsLoading = false;
                StateHasChanged();
                return;
            }
            
            Console.WriteLine(response.Id.ToString());
            
            var claims = new List<Claim>
            {
                new(ClaimTypes.NameIdentifier, response.Id.ToString()),
                new(ClaimTypes.Email, loginInfo.Email),
                new(ClaimTypes.Role, response.RoleName)
            };

            var claimsIdentity = new ClaimsIdentity(claims, CookieAuthenticationDefaults.AuthenticationScheme);
            var claimsPrincipal = new ClaimsPrincipal(claimsIdentity);

            await HttpContext.SignInAsync(CookieAuthenticationDefaults.AuthenticationScheme, claimsPrincipal);
            HttpContext.Response.Redirect("/");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Login failed: {ex.Message}");
            ErrorMessage = "An error occurred during login. Please try again.";
            IsLoading = false;
            StateHasChanged();
        }
    }
}