@using ShowTime.BusinessLogic.Abstractions
@using ShowTime.BusinessLogic.Dtos
@inject IArtistService ArtistService
@inject IGenreService GenreService
@rendermode InteractiveServer

<MudDialog>
    <DialogContent>
        <MudText Typo="Typo.h4" Class="mb-6" Style="color: #6a1b9a;">Edit Artist</MudText>
            
        <EditForm Model="ArtistToEdit" OnValidSubmit="Submit">
            <MudTextField @bind-Value="ArtistToEdit.Name" 
                          Label="Artist Name" 
                          Required="true"
                          RequiredError="Name is required"
                          Class="mb-4"/>
                
            <MudSelect T="int" @bind-Value="ArtistToEdit.GenreId"
                       Label="Genre"
                       Required="true"
                       RequiredError="Genre is required"
                       Class="mb-4"
                       Placeholder="Select a genre">
                @if (_genres != null)
                {
                    @foreach (var genre in _genres)
                    {
                        <MudSelectItem Value="@genre.Id">@genre.Name</MudSelectItem>
                    }
                }
            </MudSelect>
                
            <MudTextField @bind-Value="ArtistToEdit.Image" 
                          Label="Image URL" 
                          Class="mb-6"
                          HelperText="Paste a direct image link"/>
        </EditForm>
    </DialogContent>
    <DialogActions>
        <div class="d-flex justify-end gap-4">
            <MudButton @onclick="Cancel">Cancel</MudButton>
            <MudButton Color="Color.Primary" 
                       @onclick="Submit"
                       Disabled="@(!IsFormValid)">OK</MudButton>
        </div>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter]
    private IMudDialogInstance? MudDialog { get; set; }
    
    [Parameter]
    public int ArtistId { get; set; }
    private ArtistCreateDto ArtistToEdit { get; set; } = new();
    private IList<GenreGetDto>? _genres;
    
    protected override async Task OnInitializedAsync()
    {
        var artist = await ArtistService.GetEntityByIdAsync(ArtistId);
        _genres = await GenreService.GetAllEntitiesAsync();

        ArtistToEdit = new ArtistCreateDto
        {
            Name = artist.Name,
            GenreId = artist.GenreId,
            Image = artist.Image
        };
    }
    
    private bool IsFormValid => 
        !string.IsNullOrWhiteSpace(ArtistToEdit.Name) &&
        ArtistToEdit.GenreId != 0;
    
    private async Task Submit()
    {
        await ArtistService.UpdateEntityAsync(ArtistId, ArtistToEdit);
        MudDialog?.Close(DialogResult.Ok(true));
    }
    private void Cancel() => MudDialog?.Cancel();


}