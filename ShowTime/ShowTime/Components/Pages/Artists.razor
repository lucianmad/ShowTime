@page "/artists"
@using ShowTime.BusinessLogic.Abstractions
@using ShowTime.BusinessLogic.Dtos
@inject IArtistService ArtistService
@inject IGenreService GenreService
@rendermode InteractiveServer
@inject IDialogService DialogService

<MudContainer>
    <MudGrid Justify="Justify.SpaceBetween">
        <MudText Typo="Typo.h4" Class="mb-4 neon-title">ARTISTS</MudText>

        <MudButton Class="neon-button"
                   Variant="Variant.Text"
                   @onclick="@(AddArtistAsync)">
            <span class="button-text">ADD ARTIST</span>
        </MudButton>
    </MudGrid>

    <div class="search-filters">
        <div class="input-wrapper">
            <span class="search-icon">
                <svg width="20" height="20" viewBox="0 0 24 24" fill="#00ffff">
                    <path d="M15.5 14h-.79l-.28-.27a6.5 6.5 0 0 0 1.48-5.34c-.47-2.78-2.79-5-5.59-5.34a6.505 6.505 0 0 0-7.27 7.27c.34 2.8 2.56 5.12 5.34 5.59a6.5 6.5 0 0 0 5.34-1.48l.27.28v.79l4.25 4.25c.41.41 1.08.41 1.49 0 .41-.41.41-1.08 0-1.49L15.5 14zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/>
                </svg>
            </span>
            <InputText @bind-Value="_searchTerm" 
                       @bind-Value:after="ApplyFiltersAsync"
                       class="custom-search"
                       placeholder="Search by name" />
        </div>

        <div class="select-wrapper">
            <InputSelect @bind-Value="_selectedGenreId" 
                         @bind-Value:after="ApplyFiltersAsync"
                         class="custom-select">
                <option value="">All Genres</option>
                @if (_genre != null)
                {
                    @foreach (var genre in _genre)
                    {
                        <option value="@genre.Id">@genre.Name</option>
                    }
                }
            </InputSelect>
            <span class="select-arrow">â–¼</span>
        </div>
    </div>

    @if (_artists.Count == 0)
    {
        <MudPaper Class="pa-4 text-center" Style="background-color: #f5f5f5;">
            <MudText>No artists found</MudText>
        </MudPaper>
    }
    else
    {
        <MudGrid Spacing="4" Justify="Justify.FlexStart">
            @foreach (var artist in _artists)
            {
                <MudItem xs="12" sm="6" md="4" lg="3" xl="2">
                    <MudCard Style="height: 100%; border-radius: 18px; overflow: hidden; position: relative;">
                        <div style="position: relative;">
                            <MudCardMedia Image="@artist.Image" Height="250" Style="object-fit: cover;"/>
                            <div style="position: absolute; top: 8px; right: 8px; display: flex; gap: 4px;">
                                <MudIconButton Icon="@Icons.Material.Filled.Edit"
                                               Color="Color.Primary"
                                               Variant="Variant.Filled"
                                               Size="Size.Small"
                                               Style="background-color: rgba(234,146,12,0.8);"
                                               @onclick="@(() => EditArtistAsync(artist.Id))"/>
                                <MudIconButton Icon="@Icons.Material.Filled.Delete"
                                               Color="Color.Primary"
                                               Variant="Variant.Filled"
                                               Size="Size.Small"
                                               Style="background-color: rgba(253,2,2,0.8);"
                                               @onclick="@(() => DeleteArtistAsync(artist.Id))"/>
                            </div>
                        </div>
                        <MudCardContent Style="background: linear-gradient(135deg, #41267a 0%, #1a1a2e 100%); min-height: 80px;">
                            <MudText Typo="Typo.h6" Class="neon-card-title" Style="margin-bottom: 8px;">@artist.Name</MudText>
                            <MudText Typo="Typo.body2" Class="neon-card-text">@artist.Genre?.Name</MudText>
                        </MudCardContent>
                    </MudCard>
                </MudItem>
            }
        </MudGrid>
    }
</MudContainer>

@code {
    private IList<ArtistGetDto> _artists = new List<ArtistGetDto>();
    private IList<GenreGetDto> _genre = new List<GenreGetDto>();
    
    private string _searchTerm = string.Empty;
    private int? _selectedGenreId = null;

    protected override async Task OnInitializedAsync()
    {
        _genre = await GenreService.GetAllEntitiesAsync();
        _artists = await ArtistService.GetAllEntitiesAsync();
    }

    private async Task AddArtistAsync()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true, MaxWidth = MaxWidth.Medium, FullWidth = true };

        var dialogReference = await DialogService.ShowAsync<AddArtistDialog>("Add artist", options);
        var result = await dialogReference.Result;

        if (result != null && !result.Canceled)
        {
            _artists = await ArtistService.GetAllEntitiesAsync();
            await ApplyFiltersAsync();
        }
    }
    
    private async Task EditArtistAsync(int id)
    {
        var parameters = new DialogParameters
        {
            { "ArtistId", id }
        };

        var options = new DialogOptions { CloseOnEscapeKey = true, MaxWidth = MaxWidth.Medium, FullWidth = true };

        var dialogReference = await DialogService.ShowAsync<EditArtistDialog>("Edit Artist", parameters, options);
        var result = await dialogReference.Result;

        if (result != null && !result.Canceled)
        {
            _artists = await ArtistService.GetAllEntitiesAsync();
            await ApplyFiltersAsync();
        }
    }

    private async Task DeleteArtistAsync(int id)
    {
        var parameters = new DialogParameters<DeleteArtistDialog>
        {
            { "ArtistId", id},
            { x => x.ContentText, "Are you sure you want to delete this artist? This process cannot be undone." },
            { x => x.ButtonText, "Delete" },
            { x => x.Color, Color.Error }
        };

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

        var dialogReference = await DialogService.ShowAsync<DeleteArtistDialog>("Delete", parameters, options);
        var result = await dialogReference.Result;

        if (result != null && !result.Canceled)
        {
            _artists = await ArtistService.GetAllEntitiesAsync();
            await ApplyFiltersAsync();
        }
    }

    private async Task ApplyFiltersAsync()
    {
        if (!string.IsNullOrWhiteSpace(_searchTerm) && _selectedGenreId.HasValue)
        {
            var filteredByGenre = await ArtistService.FilterByGenreAsync(_selectedGenreId.Value);
            _artists = filteredByGenre
                .Where(a => a.Name.Contains(_searchTerm, StringComparison.OrdinalIgnoreCase))
                .ToList();
        }
        else if (!string.IsNullOrWhiteSpace(_searchTerm))
        {
            _artists = await ArtistService.SearchByNameAsync(_searchTerm);
        }
        else if (_selectedGenreId.HasValue)
        {
            _artists = await ArtistService.FilterByGenreAsync(_selectedGenreId.Value);
        }
        else
        {
            _artists = await ArtistService.GetAllEntitiesAsync();
        }
    }
}