@page "/artists"
@using ShowTime.BusinessLogic.Abstractions
@using ShowTime.BusinessLogic.Dtos
@inject IArtistService ArtistService
@inject IGenreService GenreService
@rendermode InteractiveServer
@inject IDialogService DialogService

<MudContainer>
    <MudGrid Justify="Justify.SpaceBetween">
        <MudItem>
            <MudText Typo="Typo.h4" Class="mb-4" Style="color: #6a1b9a; font-weight: 600;">Artists Page</MudText>
        </MudItem>
        <MudItem>
            <MudButton Color="Color.Primary"
                       Variant="Variant.Filled"
                       @onclick="@(AddArtistAsync)">Add artist</MudButton>
        </MudItem>
    </MudGrid>
    
    <MudGrid Class="mb-4" Spacing="2">
        <MudItem xs="12" sm="6">
            <MudTextField Value="_searchTerm"
                          Label="Search by name"
                          Variant="Variant.Filled"
                          Adornment="Adornment.Start"
                          AdornmentIcon="@Icons.Material.Filled.Search"
                          Immediate="true"
                          ValueChanged="@((string value) => OnSearchChanged(value))"/>
        </MudItem>
        <MudItem xs="12" sm="6">
            <MudSelect T="int?" 
                       Value="_selectedGenreId" 
                       Label="Filter by genre" 
                       Variant="Variant.Filled" 
                       Clearable="true" 
                       ValueChanged="@((int? value) => OnGenreChanged(value))">
                @foreach (var genre in _genre)
                {
                    <MudSelectItem Value="(int?)genre.Id">@genre.Name</MudSelectItem>
                }
            </MudSelect>
        </MudItem>
    </MudGrid>


    @if (_artists.Count == 0)
    {
        <MudPaper Class="pa-4 text-center" Style="background-color: #f5f5f5;">
            <MudText>No artists found</MudText>
        </MudPaper>
    }
    else
    {
        <MudGrid Spacing="4" Justify="Justify.FlexStart">
            @foreach (var artist in _artists)
            {
                <MudItem xs="12" sm="6" md="4" lg="3" xl="2">
                    <MudCard Style="height: 100%; border-radius: 18px; overflow: hidden; position: relative;">
                        <div style="position: relative;">
                            <MudCardMedia Image="@artist.Image" Height="250" Style="object-fit: cover;"/>
                            <div style="position: absolute; top: 8px; right: 8px; display: flex; gap: 4px;">
                                <MudIconButton Icon="@Icons.Material.Filled.Edit"
                                               Color="Color.Primary"
                                               Variant="Variant.Filled"
                                               Size="Size.Small"
                                               Style="background-color: rgba(234,146,12,0.8);"
                                               @onclick="@(() => EditArtistAsync(artist.Id))"/>
                                <MudIconButton Icon="@Icons.Material.Filled.Delete"
                                               Color="Color.Primary"
                                               Variant="Variant.Filled"
                                               Size="Size.Small"
                                               Style="background-color: rgba(253,2,2,0.8);"
                                               @onclick="@(() => DeleteArtistAsync(artist.Id))"/>
                            </div>
                        </div>
                        <MudCardContent Style="background: linear-gradient(135deg, #41267a 0%, #1a1a2e 100%);">
                            <MudText Typo="Typo.h6" Style="color: white; margin-bottom: 8px;">@artist.Name</MudText>
                            <MudText Typo="Typo.body2" Style="color: #bdc3c7;">@artist.Genre?.Name</MudText>
                        </MudCardContent>
                    </MudCard>
                </MudItem>
            }
        </MudGrid>
    }
</MudContainer>

@code {
    private IList<ArtistGetDto> _artists = new List<ArtistGetDto>();
    private IList<GenreGetDto> _genre = new List<GenreGetDto>();
    
    private string _searchTerm = string.Empty;
    private int? _selectedGenreId = null;

    
    protected override async Task OnInitializedAsync()
    {
        _genre = await GenreService.GetAllEntitiesAsync();
        _artists = await ArtistService.GetAllEntitiesAsync();
    }

    private async Task AddArtistAsync()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true, MaxWidth = MaxWidth.Medium, FullWidth = true };

        var dialogReference = await DialogService.ShowAsync<AddArtistDialog>("Add artist", options);
        var result = await dialogReference.Result;

        if (result != null && !result.Canceled)
        {
            _artists = await ArtistService.GetAllEntitiesAsync();
            await ApplyFiltersAsync();
        }
    }
    
    private async Task EditArtistAsync(int id)
    {
        var parameters = new DialogParameters
        {
            { "ArtistId", id }
        };

        var options = new DialogOptions { CloseOnEscapeKey = true, MaxWidth = MaxWidth.Medium, FullWidth = true };

        var dialogReference = await DialogService.ShowAsync<EditArtistDialog>("Edit Artist", parameters, options);
        var result = await dialogReference.Result;


        if (result != null && !result.Canceled)
        {
            _artists = await ArtistService.GetAllEntitiesAsync();
            await ApplyFiltersAsync();
        }
    }

    
    private async Task DeleteArtistAsync(int id)
    {
        var parameters = new DialogParameters<DeleteArtistDialog>
        {
            { "ArtistId", id},
            { x => x.ContentText, "Are you sure you want to delete this artist? This process cannot be undone." },
            { x => x.ButtonText, "Delete" },
            { x => x.Color, Color.Error }
        };

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

        var dialogReference = await DialogService.ShowAsync<DeleteArtistDialog>("Delete", parameters, options);
        var result = await dialogReference.Result;

        if (result != null && !result.Canceled)
        {
            _artists = await ArtistService.GetAllEntitiesAsync();
            await ApplyFiltersAsync();
        }
    }
    
    private async Task OnSearchChanged(string newValue)
    {
        _searchTerm = newValue;
        await ApplyFiltersAsync();
    }

    private async Task OnGenreChanged(int? newGenreId)
    {
        _selectedGenreId = newGenreId;
        await ApplyFiltersAsync();
    }

    private async Task ApplyFiltersAsync()
    {
        if (!string.IsNullOrWhiteSpace(_searchTerm) && _selectedGenreId.HasValue)
        {
            var filteredByGenre = await ArtistService.FilterByGenreAsync(_selectedGenreId.Value);
            _artists = filteredByGenre
                .Where(a => a.Name.Contains(_searchTerm, StringComparison.OrdinalIgnoreCase))
                .ToList();
        }
        else if (!string.IsNullOrWhiteSpace(_searchTerm))
        {
            _artists = await ArtistService.SearchByNameAsync(_searchTerm);
        }
        else if (_selectedGenreId.HasValue)
        {
            _artists = await ArtistService.FilterByGenreAsync(_selectedGenreId.Value);
        }
        else
        {
            _artists = await ArtistService.GetAllEntitiesAsync();
        }
    }
    
}