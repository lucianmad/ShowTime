@using ShowTime.BusinessLogic.Abstractions
@using ShowTime.BusinessLogic.Dtos
@inject IFestivalService FestivalService
@inject ILocationService LocationService
@inject ISnackbar Snackbar
@rendermode InteractiveServer

<MudDialog>
    <DialogContent>
        <MudText Typo="Typo.h4" Class="mb-6" Style="color: #6a1b9a;">Add New Festival</MudText>

        <EditForm Model="NewFestival" OnValidSubmit="Submit">
            <MudTextField @bind-Value="NewFestival.Name"
                          Label="Festival Name"
                          Required="true"
                          RequiredError="Name is required"
                          Class="mb-4"/>
            <MudSelect @bind-Value="SelectedCountry" 
                       Label="Country" 
                       Required="true" 
                       RequiredError="Country is required" 
                       Class="mb-4" 
                       Placeholder="Select a country">
                @if (_countries != null)
                {
                    @foreach (var country in _countries)
                    {
                        <MudSelectItem Value="@country">@country</MudSelectItem>
                    }
                }
            </MudSelect>

            <MudSelect @bind-Value="NewFestival.LocationId" 
                       Label="City" 
                       Required="true" 
                       RequiredError="City is required" 
                       Class="mb-4" 
                       Placeholder="Select a city" 
                       Disabled="@string.IsNullOrEmpty(SelectedCountry)">
                @if (!string.IsNullOrEmpty(SelectedCountry) && _locations != null)
                {
                    @foreach (var location in _locations.Where(l => l.Country == SelectedCountry))
                    {
                        <MudSelectItem Value="@location.Id">@location.City</MudSelectItem>
                    }
                }
            </MudSelect>
            <MudDatePicker @bind-Date="NewFestival.StartDate"
                           Label="Start Date"
                           DisplayMonths="2"
                           TitleDateFormat="dddd, dd MMMM"
                           Class="mb-6"
                           HelperText="Start Date is required"/>
            <MudDatePicker @bind-Date="NewFestival.EndDate"
                           Label="End Date"
                           DisplayMonths="2"
                           TitleDateFormat="dddd, dd MMMM"
                           Class="mb-6"
                           HelperText="End Date is required"/>
            <MudTextField @bind-Value="NewFestival.SplashArt"
                          Label="Splash Art"
                          Class="mb-6"
                          HelperText="Paste a direct image link"/>
            <MudTextField @bind-Value="NewFestival.Capacity"
                          Label="Capacity"
                          Required="true"
                          RequiredError="Capacity is required"
                          Class="mb-4"/>
        </EditForm>
    </DialogContent>
    <DialogActions>
        <div class="d-flex justify-end gap-4">
            <MudButton Variant="Variant.Text"
                       Color="Color.Default"
                       @onclick="Cancel">
                Cancel
            </MudButton>
            <MudButton Variant="Variant.Filled"
                       Color="Color.Primary"
                       ButtonType="ButtonType.Submit"
                       Disabled="@(!IsFormValid)"
                       @onclick="Submit">
                Add Festival
            </MudButton>
        </div>
    </DialogActions>
</MudDialog>
@code {
    [CascadingParameter]
    private IMudDialogInstance? MudDialog { get; set; }
    [SupplyParameterFromForm]
    private FestivalCreateDto NewFestival { get; set; } = new();
    private IList<LocationGetDto>? _locations;
    private List<string>? _countries = new();
    private string SelectedCountry { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        _locations = await LocationService.GetAllEntitiesAsync();
        if (_locations != null)
        {
            _countries = _locations.Select(l => l.Country).Distinct().OrderBy(c => c).ToList();
        }
    }

    private bool IsFormValid =>
        !string.IsNullOrWhiteSpace(NewFestival.Name) &&
        NewFestival.LocationId != 0 &&
        NewFestival is { StartDate: not null, EndDate: not null } &&
        NewFestival.StartDate <= NewFestival.EndDate &&
        NewFestival.Capacity > 0;

    public async Task Submit()
    {
        await FestivalService.AddEntityAsync(NewFestival);
        Snackbar.Add("Festival successfully added", Severity.Success);
        MudDialog?.Close(DialogResult.Ok(true));
    }

    private void Cancel() => MudDialog?.Cancel();

    //adaugat artisti in lineup la festival
    //validari pe field uri la create si edit
    //popup la delete
    //filtrari (dupa start date end date etc)
}