@using ShowTime.BusinessLogic.Abstractions
@using ShowTime.BusinessLogic.Dtos
@inject IFestivalService FestivalService
@inject ICountryService CountryService
@inject ICityService CityService
@inject ITicketTypeService TicketTypeService
@inject IFestivalTicketTypeService FestivalTicketTypeService
@inject ISnackbar Snackbar
@rendermode InteractiveServer

<MudDialog>
    <DialogContent>
        <MudText Typo="Typo.h4" Class="mb-6" Style="color: #6a1b9a;">Add New Festival</MudText>

        <EditForm Model="NewFestival" OnValidSubmit="Submit">
            <MudTextField @bind-Value="NewFestival.Name"
                          Label="Festival Name"
                          Required="true"
                          RequiredError="Name is required"
                          Class="mb-4"/>
            
            <MudSelect @bind-Value="SelectedCountryId"
                       Label="Country"
                       Required="true"
                       RequiredError="Country is required"
                       Class="mb-4"
                       Placeholder="Select a country"
                       T="int?">
                @if (_countries != null)
                {
                    @foreach (var country in _countries)
                    {
                        <MudSelectItem Value="@country.Id" T="int?">@country.Name</MudSelectItem>
                    }
                }
            </MudSelect>

            <MudSelect @bind-Value="NewFestival.CityId" 
                       Label="City" 
                       Required="true" 
                       RequiredError="City is required" 
                       Class="mb-4" 
                       Placeholder="Select a city" 
                       Disabled="@(!SelectedCountryId.HasValue)"
                       T="int?">
                @if (SelectedCountryId.HasValue && _cities != null)
                {
                    @foreach (var city in _cities.Where(c => c.CountryId == SelectedCountryId.Value))
                    {
                        <MudSelectItem Value="@city.Id" T="int?">@city.Name</MudSelectItem>
                    }
                }
            </MudSelect>
            
            <MudDatePicker @bind-Date="NewFestival.StartDate"
                           Label="Start Date"
                           DisplayMonths="2"
                           TitleDateFormat="dddd, dd MMMM"
                           Class="mb-6"
                           HelperText="Start Date is required"/>
            
            <MudDatePicker @bind-Date="NewFestival.EndDate"
                           Label="End Date"
                           DisplayMonths="2"
                           TitleDateFormat="dddd, dd MMMM"
                           Class="mb-6"
                           HelperText="End Date is required"/>
            
            <MudTextField @bind-Value="NewFestival.SplashArt"
                          Label="Splash Art"
                          Class="mb-6"
                          HelperText="Paste a direct image link"/>
            
            <MudText Typo="Typo.h6" Class="mt-6 mb-2">Ticket Types</MudText>

            <MudTable Items="_ticketTypeCreateDtos">
                <HeaderContent>
                    <MudTh>Ticket Type</MudTh>
                    <MudTh>Price</MudTh>
                    <MudTh>Quantity</MudTh>
                </HeaderContent>
                <RowTemplate Context="ticket">
                    <MudTd>@ticket.TicketTypeName</MudTd>
                    <MudTd>
                        <MudNumericField @bind-Value="ticket.Price" T="int" Min="0" Class="w-24" />
                    </MudTd>
                    <MudTd>
                        <MudNumericField @bind-Value="ticket.Quantity" T="int" Min="0" Class="w-20" />
                    </MudTd>
                </RowTemplate>
            </MudTable>

            
        </EditForm>
    </DialogContent>
    <DialogActions>
        <div class="d-flex justify-end gap-4">
            <MudButton Variant="Variant.Text"
                       Color="Color.Default"
                       @onclick="Cancel">
                Cancel
            </MudButton>
            <MudButton Variant="Variant.Filled"
                       Color="Color.Primary"
                       ButtonType="ButtonType.Submit"
                       Disabled="@(!IsFormValid)"
                       @onclick="Submit">
                Add Festival
            </MudButton>
        </div>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter]
    private IMudDialogInstance? MudDialog { get; set; }
    
    [SupplyParameterFromForm]
    private FestivalCreateDto NewFestival { get; set; } = new();
    
    private List<FestivalTicketTypeCreateDto> _ticketTypeCreateDtos = new();
    private IList<CountryGetDto>? _countries;
    private IList<CityGetDto>? _cities;
    private int? _selectedCountryId;
    private int? SelectedCountryId 
    { 
        get => _selectedCountryId;
        set 
        {
            if (_selectedCountryId != value)
            {
                _selectedCountryId = value;
                NewFestival.CityId = null;
                StateHasChanged();
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        _countries = await CountryService.GetAllEntitiesAsync();
        _cities = await CityService.GetAllEntitiesAsync();
        
        var ticketTypes = await TicketTypeService.GetAllEntitiesAsync();
        _ticketTypeCreateDtos = ticketTypes.Select(t => new FestivalTicketTypeCreateDto
        {
            TicketTypeId = t.Id,
            TicketTypeName = t.Name
        }).ToList();
    }

    private bool IsFormValid =>
        !string.IsNullOrWhiteSpace(NewFestival.Name) &&
        NewFestival.CityId.HasValue &&
        NewFestival.CityId != 0 &&
        NewFestival is { StartDate: not null, EndDate: not null } &&
        NewFestival.StartDate <= NewFestival.EndDate &&
        _ticketTypeCreateDtos.Any(t => t.Price > 0 && t.Quantity > 0);

    public async Task Submit()
    {
        var createdFestival = await FestivalService.AddEntityAsync(NewFestival); 
        var ticketTypeDtos = _ticketTypeCreateDtos
            .Where(t => t.Quantity > 0 && t.Price > 0)
            .Select(t => new FestivalTicketTypeCreateDto
            {
                FestivalId = createdFestival.Id,
                TicketTypeId = t.TicketTypeId,
                Price = t.Price,
                Quantity = t.Quantity
            }).ToList();

        if (ticketTypeDtos.Any())
        {
            await FestivalTicketTypeService.AddMultipleFestivalTicketTypesAsync(createdFestival.Id, ticketTypeDtos);
        }
        Snackbar.Add("Festival successfully added", Severity.Success);
        MudDialog?.Close(DialogResult.Ok(true));
    }

    private void Cancel() => MudDialog?.Cancel();
}